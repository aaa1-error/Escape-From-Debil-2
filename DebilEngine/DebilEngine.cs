using System.Diagnostics;

namespace Debil {
    public partial class DebilEngine {
        public Level map;
        public Player player;
        System.Timers.Timer PlayerUpdateTimer;
        System.Timers.Timer EntityMoveTimer;
        System.Timers.Timer EntityUpdateTimer;
        int EntityMoveInterval = 350;
        int EntityUpdateInterval = 5;
        bool DoDebugDraw;
        public DebilEngine(int Height, int Width, LevelGenerationStrategy genStrat) {
            DoDebugDraw = false;

            player = new Player(1,1, "ü§°", this);
            map = new Level(Height, Width, this, genStrat);

            map.TeleportRandom(ref player);
            map.UpdateWaveMap(player.Position);

            PlayerUpdateTimer = new System.Timers.Timer(1000);
            PlayerUpdateTimer.Elapsed += player.Update;

            EntityMoveTimer = new System.Timers.Timer(EntityMoveInterval);
            EntityUpdateTimer = new System.Timers.Timer(EntityUpdateInterval);

            foreach(var mob in map.Mobs) {
                EntityMoveTimer.Elapsed += mob.Move;
                EntityUpdateTimer.Elapsed += mob.Update;
            }

            foreach(var pickup in map.Pickups) {
                EntityUpdateTimer.Elapsed += pickup.CheckCollision;
            }
        }
        public void Draw() {
            string stats = "\u001b[37;1mHealth:\u001b[0m " + string.Join("", Enumerable.Repeat("‚ù§Ô∏è", player.Health).ToArray())
             + "  \u001b[37;1mScore: " + player.Score + "\u001b[0m";

            Console.WriteLine(new string(' ', stats.Length) + '\r' + stats);

            string[,] frame = new string[map.Height, map.Width];

            for(int i = 0; i < map.Height; i++) {
                for(int j = 0; j < map.Width; j++) {
                    frame[i, j] = map[i, j].Texture;
                }
            }

            frame[player.Position.y, player.Position.x] = player.Texture;

            /* if(player.Position.y > 0 && map[player.Position.y - 1, player.Position.x].IsSolid) {
                frame[player.Position.y - 1, player.Position.x] = "üü™";
            }

            if(player.Position.y < map.Height - 1 && map[player.Position.y + 1, player.Position.x].IsSolid) {
                frame[player.Position.y + 1, player.Position.x] = "üü™";
            }

            if(player.Position.x > 0 && map[player.Position.y, player.Position.x - 1].IsSolid) {
                frame[player.Position.y, player.Position.x - 1] = "üü™";
            }

            if(player.Position.x < map.Width - 1 && map[player.Position.y, player.Position.x + 1].IsSolid) {
                frame[player.Position.y, player.Position.x + 1] = "üü™";
            } */

            foreach(var mob in map.Mobs) {
                frame[mob.Position.y, mob.Position.x] = mob.Texture;
            }

            foreach(var pickup in map.Pickups) {
                frame[pickup.Position.y, pickup.Position.x] = pickup.Texture;
            }

            

            for (int i = 0; i < map.Height; i++) {
                for (int j = 0; j < map.Width; j++) {
                    Console.Write(frame[i,j]);
                }

                Console.WriteLine();
            }

            System.Console.WriteLine(map.WaveMap[player.Position.y, player.Position.x].ToString().PadRight(3, ' '));
        }

        static List<string> WaveDistances = "üü© üü® üüß üü• üü¶ üü™ ‚¨ú".Split(' ').ToList();
        public void DebugDraw() {
            string stats = "\u001b[37;1mHealth:\u001b[0m " + string.Join("", Enumerable.Repeat("‚ù§Ô∏è", player.Health).ToArray())
             + "  \u001b[37;1mScore: " + player.Score + "\u001b[0m";

            Console.WriteLine(new string(' ', stats.Length) + '\r' + stats);

            string[,] frame = new string[map.Height, map.Width];

            for(int i = 0; i < map.Height; i++) {
                for(int j = 0; j < map.Width; j++) {
                    if(map[i, j].IsSolid) {
                        frame[i, j] = "‚¨õ";
                    } else {
                        if(map.WaveMap[i, j] == 0) {
                            frame[i, j] = "  ";
                        } else if(map.WaveMap[i, j] <= 10) {
                            frame[i, j] = WaveDistances[0];
                        }  else if(map.WaveMap[i, j] <= 25){
                            frame[i, j] = WaveDistances[1];
                        } else if(map.WaveMap[i, j] <= 40) {
                            frame[i, j] = WaveDistances[2];
                        } else if(map.WaveMap[i, j] <= 55) {
                            frame[i, j] = WaveDistances[3];
                        } else if(map.WaveMap[i, j] <= 70) {
                            frame[i, j] = WaveDistances[4];
                        } else if(map.WaveMap[i, j] <= 85) {
                            frame[i, j] = WaveDistances[5];
                        } else {
                            frame[i, j] = WaveDistances[6];
                        }
                    }
                }
            }

            frame[player.Position.y, player.Position.x] = "üü™";

            foreach(var mob in map.Mobs) {
                

                switch(mob.GetType().Name) {
                    case "RandomDurachock":
                        frame[mob.Position.y, mob.Position.x] = "üü¢";
                        break;
                    case "PathFindingDebchick":
                        frame[mob.Position.y, mob.Position.x] = "üî¥";
                        break;
                    default:
                        frame[mob.Position.y, mob.Position.x] = "? ";
                        break;
                }
            }

            foreach(var pickup in map.Pickups) {
                frame[pickup.Position.y, pickup.Position.x] = "üçî";
            }

            for (int i = 0; i < map.Height; i++) {
                for (int j = 0; j < map.Width; j++) {
                    Console.Write(frame[i,j]);
                }

                Console.WriteLine();
            }

            System.Console.WriteLine(map.WaveMap[player.Position.y, player.Position.x].ToString().PadRight(3, ' '));
        }
        public void Run() {
            
            player.Position = map.GetRandomPosition();
            map.UpdateWaveMap(player.Position);
            player.Health = 1;
            player.Score = 0;

            PlayerUpdateTimer.Start();
            EntityUpdateTimer.Start();
            EntityMoveTimer.Start();
            
            while(player.Health > 0) {
                Console.CursorVisible = false;

                Console.SetCursorPosition(0, 0);
                
                player.Input();

                if(DoDebugDraw) {
                    this.DebugDraw();
                } else {
                    this.Draw();
                }

                Thread.Sleep(5);
            }

            PlayerUpdateTimer.Stop();
            EntityUpdateTimer.Stop();
            EntityMoveTimer.Stop();
        }
        public void Menu() {
            ConsoleKeyInfo key;
            Process proc;

            while(true) {
                Console.WriteLine("\u001b[38;5;202m" +
                                  "‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì         ‚ñÑ‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà \n" +
                                  "‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí        ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ \n" +
                                  "‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñà   ‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë       ‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà   \n" +
                                  "‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë       ‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ \n" +
                                  "‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí   ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí\n" +
                                  " ‚ñí‚ñí‚ñì  ‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñì  ‚ñë ‚ñí‚ñë‚ñì  ‚ñë    ‚ñë‚ñí   ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë\n" +
                                  " ‚ñë ‚ñí  ‚ñí  ‚ñë ‚ñë  ‚ñë‚ñí‚ñë‚ñí   ‚ñë  ‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë     ‚ñë   ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë‚ñë  ‚ñë      ‚ñë ‚ñë ‚ñë  ‚ñë\n" +
                                  " ‚ñë ‚ñë  ‚ñë    ‚ñë    ‚ñë    ‚ñë  ‚ñí ‚ñë  ‚ñë ‚ñë      ‚ñë ‚ñë   ‚ñë   ‚ñë   ‚ñí   ‚ñë      ‚ñë      ‚ñë   \n" +
                                  "   ‚ñë       ‚ñë  ‚ñë ‚ñë       ‚ñë      ‚ñë  ‚ñë         ‚ñë       ‚ñë  ‚ñë       ‚ñë      ‚ñë  ‚ñë\n" +
                                  " ‚ñë                   ‚ñë                                                    \n" +
                                  "                          Press any key to start\n" +
                                  "                             Press Esc to exit\u001b[0m");

                key = Console.ReadKey(true);
                
                proc = Process.Start("clear");
                proc.Kill(true);

                if(key.Key == ConsoleKey.Escape) {
                    return;
                }

                Run();

                proc = Process.Start("clear");
                proc.Kill(true);
                
                Console.WriteLine("\u001b[38;5;202m" +
                                  "‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà    ‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ \n" +
                                  "‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí   ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå\n" +
                                  " ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë   ‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà   ‚ñë‚ñà‚ñà   ‚ñà‚ñå\n" +
                                  " ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë   ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñë‚ñà‚ñà‚ñë‚ñí‚ñì‚ñà  ‚ñÑ ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå\n" +
                                  " ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì    ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì \n" +
                                  "  ‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí     ‚ñí‚ñí‚ñì  ‚ñí ‚ñë‚ñì  ‚ñë‚ñë ‚ñí‚ñë ‚ñë ‚ñí‚ñí‚ñì  ‚ñí \n" +
                                  "‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë   ‚ñë ‚ñí ‚ñí‚ñë ‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë     ‚ñë ‚ñí  ‚ñí  ‚ñí ‚ñë ‚ñë ‚ñë  ‚ñë ‚ñë ‚ñí  ‚ñí \n" +
                                  "‚ñí ‚ñí ‚ñë‚ñë  ‚ñë ‚ñë ‚ñë ‚ñí   ‚ñë‚ñë‚ñë ‚ñë ‚ñë     ‚ñë ‚ñë  ‚ñë  ‚ñí ‚ñë   ‚ñë    ‚ñë ‚ñë  ‚ñë \n" +
                                  "‚ñë ‚ñë         ‚ñë ‚ñë     ‚ñë           ‚ñë     ‚ñë     ‚ñë  ‚ñë   ‚ñë    \n" +
                                  "‚ñë ‚ñë                           ‚ñë                  ‚ñë      \u001b[0m");

                Console.ReadKey(true);

                proc = Process.Start("clear");
                proc.Kill(true);
            }
        }
    }
}